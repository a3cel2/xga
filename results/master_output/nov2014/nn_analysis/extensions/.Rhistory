c(rownames(count_table)[x[1]], colnames(count_table)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_rat > 1, arr.ind = T), 1, function(x) {
c(rownames(count_table)[x[1]], colnames(count_table)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_rat > 2, arr.ind = T), 1, function(x) {
c(rownames(count_table)[x[1]], colnames(count_table)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
cor(count_table,marginal_count_table)
cor(as.vector(count_table),as.vector(marginal_count_table))
cor(as.vector(count_table[count_table < 100]),as.vector(marginal_count_table[count_table < 100]))
plot(as.vector(count_table[count_table < 100]),as.vector(marginal_count_table[count_table < 100]))
plot(as.vector(count_table[count_table < 100 & count_table > 1]),as.vector(marginal_count_table[count_table < 100 & count_table > 1]))
plot(marginal_count_table[marginal_count_table > 100], count_table[marginal_count_table > 100])
plot(marginal_count_table[marginal_count_table > 100], count_table[marginal_count_table > 100],ylim=c(0,1000))
plot(marginal_count_table[marginal_count_table > 100], count_table[marginal_count_table > 100],ylim=c(0,2000),xlim=c(0,2000))
source('~/Dropbox/Roth Lab/projects/lpg_cbu_bfg/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/lpg_cbu_bfg/master.R', echo=TRUE)
marginal_freq_error_table <- marginal_freq_error_table_v2
names(marginal_freq_error_table) <- named_vals
z_values <- t(sapply(1:nrow(marginal_freq_table),function(i){
#print(i)
sapply(1:ncol(marginal_freq_table),function(j){
measured_freq <- freq_table[i,j]
marginal_freq <- marginal_freq_table[i,j]
measured_count <- count_table[i,j]
marginal_count <- marginal_count_table[i,j]
#knns <- sort(abs(count_table - measured_count),index.return=T)$ix[1:1000]
#marginal_freq_error <- mad(freq_table[knns] - marginal_freq_table[knns])
marginal_count_error <- marginal_freq_error_table[[as.character(measured_count)]]
#error_function$coef[1] + error_function$coef[2]*measured_count
measured_count_error <- 0#sqrt(count_table[i,j])
#marginal_freq_error_table[as.char(measured_count)]
z_val <- (measured_count - marginal_count)/sqrt(marginal_count_error^2 + measured_count_error^2)
})
}))
hist(z_values)
hist(z_values,breaks=100)
plot(z_values[abs(z_values > 2)])
plot(z_values[abs(z_values) > 2])
plot(z_values[abs(z_values) > 2],ylim=c(-50,10))
plot(z_values[abs(z_values) > 5],ylim=c(-50,10))
t(apply(which(z_values > 5, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
rownames(z_values) <- rownames(freq_table)
colnames(z_values) <- colnames(freq_table)
t(apply(which(z_values > 5, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(z_values < -45, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(z_values < -40, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
per_gene_z <- t(sapply(row_genes,function(row_gene){
sapply(col_genes,function(col_gene){
row_inds <- row_genes == row_gene
col_inds <- col_genes == col_gene
return(median(z_values[row_inds,col_inds]))
#return(sum(z_values[row_inds,col_inds])/sqrt(length(z_values[row_inds,col_inds])))
})
}))
plot(per_gene_z[abs(per_gene_z) > 5],ylim=c(-50,10))
plot(per_gene_z[abs(per_gene_z) > 2],ylim=c(-50,10))
max(per_gene_z)
t(apply(which(z_values > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z < -15, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z < -10, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
max(z_values)
sum(z_values > 10)
which(z_values > 10)
t(apply(which(z_values > 10, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(z_values > 10, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum, per_gene_z[x[1],x[2]])
}))
t(apply(which(z_values > 3, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum, per_gene_z[x[1],x[2]])
}))
plot(marginal_freq_error_table)
plot(unlist(marginal_freq_error_table))
plot(named_vals,unlist(marginal_freq_error_table))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(1,1000))
plot(named_vals,as.numeric(named_vals)/unlist(marginal_freq_error_table),xlim=c(1,1000))
plot(named_vals,as.numeric(named_vals)/unlist(marginal_freq_error_table),xlim=c(1,1))
plot(named_vals,as.numeric(named_vals)/unlist(marginal_freq_error_table),ylim=c(1,1))
plot(named_vals,as.numeric(named_vals)/unlist(marginal_freq_error_table))
plot(named_vals,unlist(marginal_freq_error_table)/as.numeric(named_vals))
plot(named_vals,unlist(marginal_freq_error_table)/as.numeric(named_vals),xlim=c(0,1000))
plot(named_vals,unlist(marginal_freq_error_table)/as.numeric(named_vals),xlim=c(0,1000),ylim=c(0,1))
abline(v=30)
plot(named_vals,unlist(marginal_freq_error_table)/as.numeric(named_vals),xlim=c(0,3000),ylim=c(0,1))
named_vals <- as.character(unique(as.vector(count_table))[1:100])
marginal_freq_error_table <- lapply(named_vals,function(i){
yo <<- yo + 1
print(yo)
knns <- which(abs(log2(count_table/as.numeric(i))) < 1)
#sort(abs(count_table - as.numeric(i)),index.return=T)$ix[1:5000]
marginal_freq_error <- mad(count_table[knns] - marginal_count_table[knns])
return(marginal_freq_error)
})
names(marginal_freq_error_table) <- named_vals
plot(named_vals,unlist(marginal_freq_error_table))
yo <- 0
named_vals <- as.character(unique(as.vector(count_table)))
marginal_freq_error_table <- lapply(named_vals,function(i){
yo <<- yo + 1
print(yo)
knns <- which(abs(log2(count_table/as.numeric(i))) < 1)
#sort(abs(count_table - as.numeric(i)),index.return=T)$ix[1:5000]
marginal_freq_error <- mad(count_table[knns] - marginal_count_table[knns])
return(marginal_freq_error)
})
names(marginal_freq_error_table) <- named_vals
plot(named_vals,unlist(marginal_freq_error_table))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,1000))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,2000))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,5000))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,6000))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,10000))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,50000))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,1000))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,1000),ylim=c(0,200))
abline(h=100)
abline(v=200)
plot(1:1000,sqrt(1:1000))
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,1000),ylim=c(0,300))
sqrt(1000)
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,1000),ylim=c(0,300))
max(z_values)
sum(z_values > 2)
sum(z_values > 3)
which(z_values > 3)
t(apply(which(z_values > 3, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
marginal_count_table[1,]
plot(marginal_count_table[1,])
plot(marginal_count_table[1,],count_table[1,])
plot(count_table[1,],marginal_count_table[1,])
apply(count_table,1,max)
hist(apply(count_table,1,max))
hist(apply(count_table,1,max))
hist(log2(apply(count_table,1,max)))
sum(apply(count_table,1,max))
sum(apply(count_table,1,max) > 100)
sum(apply(count_table,1,max) > 1000)
sum(apply(count_table,2,max) > 1000)
sum(apply(count_table,2,max) > 100)
dim(count_table)
sum(apply(count_table,1,max) > 100)
log2(100)
sum(apply(count_table,1,max) > 1000)
sum(apply(count_table,2,max) > 1000)
hist(row_marginals)
hist(row_marginals,breaks=100)
sum(apply(count_table,2,mean) > 10)
sum(apply(count_table,1,mean) > 10)
source('~/Dropbox/Roth Lab/projects/lpg_cbu_bfg/master.R', echo=TRUE)
hist(z_values)
sum(z_values > 1)
sum(z_values > 3)
sum(z_values > 3)
plot(count_table[1,],marginal_count_table[1,])
plot(count_table[2,],marginal_count_table[2,])
plot(count_table[3,],marginal_count_table[3,])
plot(count_table[,1],marginal_count_table[,1])
plot(count_table[,2],marginal_count_table[,2])
plot(count_table[,3],marginal_count_table[,3])
plot(count_table[,4],marginal_count_table[,4])
count_table <- as.matrix(read.table('His_LP_S25_combined_counts.csv',sep=',',header=T,row.names=1)) + 1
sum(apply(count_table,1,mean) > 100)
sum(apply(count_table,2,mean) > 100)
source('~/Dropbox/Roth Lab/projects/lpg_cbu_bfg/master.R', echo=TRUE)
plot(count_table[,3],marginal_count_table[,3])
plot(count_table[,1],marginal_count_table[,1])
plot(named_vals,unlist(marginal_freq_error_table),xlim=c(0,1000),ylim=c(0,300))
hist(z_values)
per_gene_z <- t(sapply(row_genes,function(row_gene){
sapply(col_genes,function(col_gene){
row_inds <- row_genes == row_gene
col_inds <- col_genes == col_gene
return(median(z_values[row_inds,col_inds]))
#return(sum(z_values[row_inds,col_inds])/sqrt(length(z_values[row_inds,col_inds])))
})
}))
row_genes <- sapply(rownames(count_table),function(x){strsplit(x,split='_')[[1]][1]})
col_genes <- sapply(colnames(count_table),function(x){strsplit(x,split='_')[[1]][1]})
per_gene_z <- t(sapply(row_genes,function(row_gene){
sapply(col_genes,function(col_gene){
row_inds <- row_genes == row_gene
col_inds <- col_genes == col_gene
return(median(z_values[row_inds,col_inds]))
#return(sum(z_values[row_inds,col_inds])/sqrt(length(z_values[row_inds,col_inds])))
})
}))
hist(per_gene_z)
which(per_gene_z > 2)
which(per_gene_z > 3)
t(apply(which(per_gene_z > 3, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
dim(count_table)
t(apply(which(per_gene_z > 2.5, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
rats <- log2(count_table/marginal_count_table)
t(apply(which(per_gene_z > 2 & rats > 1, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 2 & rats > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 2 & rats > 3, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 2 & rats > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
grep('LPG',rownames(count_table))
hist(count_table[grep('LPG',rownames(count_table)),grep('LPG',colnames(count_table))])
hist(count_table[grep('LPG',rownames(count_table)),grep('LPG',colnames(count_table))],breaks=100)
hist(count_table[grep('LPG',rownames(count_table),invert=T),grep('LPG',colnames(count_table),invert=T)],breaks=100)
rownames(count_table)
grep('LPG',rownames(count_table),val=T)
grep('LPG',rownames(count_table),val=T,invert=T)
grep('LPG*|AVR*',rownames(count_table),val=T,invert=T)
grep('LPG*|AVR*|DOT*',rownames(count_table),val=T,invert=T)
hist(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)],breaks=100)
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)]),breaks=100)
median(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)]),breaks=100)
median(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=F)]),breaks=100)
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=F)]),breaks=100)
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)]),breaks=100,add=T)
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=F)]),breaks=100,density=T)
?hist
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=F)]),breaks=100,freq=F)
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)]),breaks=100,add=T)
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=F)]),breaks=100,freq=F)
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)]),breaks=100,add=T,freq=F)
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)]),breaks=100,add=T,freq=F,col=rgb(0.5,0.5,0.5))
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)]),breaks=100,add=T,freq=F,col=rgb(1,0,0,0.5))
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)]),breaks=100,add=T,freq=F,col=rgb(1,0,0,0.3))
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=F)]),breaks=100,density=T,col=rgb(0,0,1,0.3))
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=F)]),breaks=100,freq=F,col=rgb(0,0,1,0.3))
hist(log2(count_table[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T),grep('LPG*|AVR*|DOT*',colnames(count_table),invert=T)]),breaks=100,add=T,freq=F,col=rgb(1,0,0,0.3))
t(apply(which(z_values > 2 & rats > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 2 & rats > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
2^12
2^10
t(apply(which(per_gene_z > 1.5 & rats > 3, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 1 & rats > 3, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 1 & rats > 2.5, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 1 & rats > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T)]
row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T)]*count_sum
hist(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T)]*count_sum)
hist(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T)]*count_sum,breaks=100)
hist(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F)]*count_sum,breaks=100)
hist(log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F)]*count_sum),breaks=100)
hist(log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T)]*count_sum),breaks=100)
count_table <- as.matrix(read.table('His_LP_S25_combined_counts.csv',sep=',',header=T,row.names=1)) + 1
count_sum <- sum(count_table)
row_marginals <- apply(count_table,1,function(x){sum(x)/count_sum})
col_marginals <- apply(count_table,2,function(x){sum(x)/count_sum})
hist(log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T)]*count_sum),breaks=100)
hist(log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F)]*count_sum),breaks=100)
wilcox.test(log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F)]*count_sum), log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F)]*count_sum))
wilcox.test(log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F)]*count_sum), log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T)]*count_sum))
t.test(log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=F)]*count_sum), log2(row_marginals[grep('LPG*|AVR*|DOT*',rownames(count_table),invert=T)]*count_sum))
source('~/Dropbox/Roth Lab/projects/lpg_cbu_bfg/master.R', echo=TRUE)
hist(z_values)
hist(z_values,breaks=100)
p_values_rescue <- pnorm(z_values,lower.tail = F)
t(apply(which(per_gene_z > 3, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
row_genes <- sapply(rownames(count_table),function(x){strsplit(x,split='_')[[1]][1]})
col_genes <- sapply(colnames(count_table),function(x){strsplit(x,split='_')[[1]][1]})
per_gene_z <- t(sapply(row_genes,function(row_gene){
sapply(col_genes,function(col_gene){
row_inds <- row_genes == row_gene
col_inds <- col_genes == col_gene
return(median(z_values[row_inds,col_inds]))
#return(sum(z_values[row_inds,col_inds])/sqrt(length(z_values[row_inds,col_inds])))
})
}))
rats <- log2(count_table/marginal_count_table)
rats[count_table < 100] <- 0
t(apply(which(per_gene_z > 3, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(per_gene_z > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(z_values > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(z_values > 2 & rats > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
t(apply(which(z_values > 3 & rats > 2, arr.ind = T), 1, function(x) {
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
}))
hist(z_values)
hist(z_values,breaks=100)
hist(z_values,breaks=100,xlim=c(-10,10))
max(z_values)
which(!is.finite(z_values))
which(!is.finite(z_values),arr.ind = T)
x<-which(!is.finite(z_values),arr.ind = T)
c(rownames(z_values)[x[1]], colnames(z_values)[x[2]], count_table[x[1],x[2]], marginal_freq_table[x[1],x[2]]*count_sum)
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
?save
list.files()
set.seed(123)
setwd(this.dir)
setwd(input_data_directory)
mapping_file <- read.table(mapping_filename, head = T, row.names = 1)
setwd(this.dir)
setwd(output_data_directory)
both_res_filename <- paste(c(resistance_output_prefix,'_both.tsv'),collapse='')
both_res_file <- read.table(both_res_filename)
#Scale to 0-1 interval, with small lower limit
both_res_file[both_res_file < 1e-10] <- 1e-10
both_res_file <- apply(both_res_file,2,function(x){x/max(x)})
mapfile <- mapping_file[rownames(both_res_file),]
genes <- colnames(mapfile)[2:17]
condition_names <- colnames(both_res_file)
drugs <- sapply(colnames(both_res_file),function(x){strsplit(x,split='_')[[1]][1]})
alpha_ind <- grep('alpha',mapfile$Plate)
A_ind <- grep('alpha',mapfile$Plate, invert = T)
A_filter <- !(apply(mapfile[A_ind,2:17],1,paste,collapse='') %in% apply(mapfile[alpha_ind,2:17],1,paste,collapse=''))
alpha_filter <- !(apply(mapfile[alpha_ind,2:17],1,paste,collapse='') %in% apply(mapfile[A_ind,2:17],1,paste,collapse=''))
A_ind <- A_ind[A_filter]
alpha_ind <- alpha_ind[alpha_filter]
nn_output_path <-
paste(c(output_results_directory,nn_output_dir), collapse = '/')
setwd(this.dir)
setwd(input_data_directory)
dir.create(nn_output_path, showWarnings = FALSE)
setwd(nn_output_path)
#Hyperparameters for neural network
learning_rate <- 0.05
epochs <- 10000
regularization_rate <- 5e-04
setwd(this.dir)
setwd(output_data_directory)
list.files()
?load
?save
args(mege_many_nn_models)
args(merge_many_nn_models)
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
save(file='sig_features_alpha_16_drugs.RData',list = 'sig_features_alpha')
sum(c(4.7,4.7,4.7,2.9,3.9,3.9,4.7,4.7,4.7,3.0,4.7,4.7,4.7,2.9,4.7,4.7,4.7,3.0,4.7,4.7,4.7,3.6,4.7,4.7,4.7,3.6,4.7,4.7,4.7,3.5,4.7,4.7,4.7,3.5,4.7,4.7,4.7,1.4,2.7,2.7,4.7,4.7,4.7,1.3,4.7,4.7,4.7,1.1,4.7,4.7,4.7,1.0,4.7,4.7,4.7,1.5,4.7,4.7,4.7,1.5,4.7,4.7,4.7,1.3,4.7,4.7,4.7,1.2))
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
named_weights
unlist(named_weights)
sum(unlist(named_weights))
sum(unlist(named_weights) != 0)
named_weighs
named_weights
named_weights$efflux_per_gene
unlist(named_weights$efflux_per_gene)
sum(unlist(named_weights$efflux_per_gene) != 0)
named_weights$efflux_per_gene[,'mitoxantrone']
sort(named_weights$efflux_per_gene[,'mitoxantrone'])
sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)
sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[2:4]
sum(sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[2:4])
sum(round(sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[2:4]))
round(sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[2:4])
round(sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[2:4],digits=2)
round(sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[2:4],digits=1)
sum(round(sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[2:4],digits=1))
sum(round(sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[1:2],digits=1))
sum(round(sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[1:2],digits=2))
sum(round(sort(named_weights$efflux_per_gene[,'mitoxantrone'],decreasing = T)[1:2],digits=4))
head(both_res_file)
rownames(mapping_file)
rownames(mapping_file) == rownames(both_res_file)
head(mapping_file[rownames(both_res_file),])
combined_df <- cbind(mapping_file[rownames(both_res_file),], both_res_file)
head(combined_df)
split_df <- split_df_to_list(combined_df,single_genes)
split_df <- split_df_to_list(combined_df,c('PDR5','SNQ2','YOR1','YCF1','YBT1'))
split_df$YBT1:`YBT1:YCF1`
wilcox.test(split_df$`YBT1:YCF1`$mitoxantrone_both,split_df$`PDR5:SNQ2`$mitoxantrone_both)
wilcox.test(split_df$`YBT1:YCF1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)
mean(split_df$`YBT1:YCF1`$mitoxantrone_both)
mean(split_df$`wt`$mitoxantrone_both)
t.test(split_df$`YBT1:YCF1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)
median(split_df$`wt`$mitoxantrone_both)
median(split_df$`YBT1:YCF1`$mitoxantrone_both)
t.test(split_df$`YBT1:YCF1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)
wilcox.test(split_df$`YBT1:YCF1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)
hist(split_df$`YBT1:YCF1`$mitoxantrone_both)
hist(split_df$`YBT1:YCF1`$mitoxantrone_both,breaks=100)
hist(split_df$`wt`$mitoxantrone_both,breaks=100)
hist(split_df$`wt`$mitoxantrone_both,breaks=100,add=T)
hist(split_df$`YBT1:YCF1`$mitoxantrone_both,breaks=100)
hist(split_df$`wt`$mitoxantrone_both,breaks=100,add=T,col='red')
t.test(split_df$`SNQ2`$benomyl_both,split_df$wt$mitoxantrone_both)
t.test(split_df$`SNQ2`$benomyl_both,split_df$wt$benomyl_both)
t.test(split_df$`SNQ2`$benomyl_both,split_df$wt$benomyl_both)$p.val
t.test(split_df$`SNQ2`$benomyl_both,split_df$wt$benomyl_both)
t.test(split_df$`PDR5`$benomyl_both,split_df$wt$benomyl_both)
t.test(split_df$`PDR5`$benomyl_both,split_df$wt$benomyl_both)$p.val
t.test(split_df$`PDR5`$benomyl_both,split_df$`PDR5:YOR1`$benomyl_both)$p.val
t.test(split_df$`YOR1`$benomyl_both,split_df$wt$benomyl_both)$p.val
t.test(split_df$`YOR1`$benomyl_both,split_df$wt$benomyl_both)
wilcox.test(split_df$`YBT1:YCF1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)
t.test(split_df$`YBT1:YCF1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)
t.test(split_df$`PDR5:SNQ2`$mitoxantrone_both,split_df$wt$mitoxantrone_both)
t.test(split_df$`PDR5:SNQ2`$mitoxantrone_both,split_df$wt$mitoxantrone_both)$p.val
named_weights
named_weights$SNQ2_inhibitions
filename <- sprintf('sig_features_alpha_%s.RData',drug)
filename
filename %in% list.files()
?save
t.test(split_df$`PDR5:SNQ2`$mitoxantrone_both,split_df$wt$mitoxantrone_both)$p.val
t.test(split_df$`PDR5:SNQ2`$mitoxantrone_both,split_df$wt$mitoxantrone_both)$p.val
wilcox.test(split_df$`YBT1:YOR1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)$p.val
wilcox.test(split_df$`YBT1:YOR1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)$p.val
t.test(split_df$`YBT1:YOR1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)$p.val
wilcox.test(split_df$`YBT1:YCF1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)
t.test(split_df$`YBT1:YCF1`$mitoxantrone_both,split_df$wt$mitoxantrone_both)
wilcox.test(split_df$`PDR5:SNQ2`$mitoxantrone_both,split_df$wt$mitoxantrone_both)$p.val
wilcox.test(split_df$`SNQ2`$benomyl_both,split_df$wt$mitoxantrone_both)$p.val
wilcox.test(split_df$`PDR5`$benomyl_both,split_df$wt$mitoxantrone_both)$p.val
wilcox.test(split_df$`PDR5`$benomyl_both,split_df$`PDR5:YOR1`$benomyl_both)$p.val
t.test(split_df$`PDR5`$benomyl_both,split_df$`PDR5:YOR1`$benomyl_both)$p.val
wilcox.test(split_df$`PDR5`$benomyl_both,split_df$`PDR5:YOR1`$benomyl_both)$p.val
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
named_weights
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
named_weights
format_named_weights_to_string(named_weights)
name_model_weights(sig_features_both_extended, c(genes, 'X'), drug)
format_named_weights_to_string(name_model_weights(sig_features_both_extended, c(genes, 'X'), drug))
sig_features_three_layer
weight_string <- format_named_weights_to_string(name_model_weights(sig_features_three_layer, genes, drug))
sig_features_three_layer
nn_fluc_three_layer
named_three_layer_weights <-
name_model_weights(
get_weights(nn_fluc_three_layer),
modifier_genes,
'fluconazole',
three_layers = T,
efflux_genes = c('PDR5')
)
get_weights(nn_fluc_three_layer)
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
get_weights(nn_fluc_three_layer)
named_three_layer_weights
format_named_weights_to_string(named_three_layer_weights)
nn_cluf
nn_fluc$model
name_model_weights(nn_fluc$model)
?name_model_weights
??name_model_weights
args(name_model_weights)
name_model_weights(nn_fluc$model, genes, 'fluconazole')
name_model_weights(get_weights(nn_fluc$model), genes, 'fluconazole')
format_named_weights_to_string(named_weights_fluc_single_envir)
named_weights_fluc_single_envir <- name_model_weights(get_weights(nn_fluc$model), genes, 'fluconazole')
format_named_weights_to_string(named_weights_fluc_single_envir)
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
sig_features_both_extended
named_three_layer_weights
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
getwd()
named_three_layer_weights
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/xga_git/scripts/master_v2.R', echo=TRUE)
5.3291 - 0.8409
3.34646 + 0.8409
5.3291 - 0.8409
