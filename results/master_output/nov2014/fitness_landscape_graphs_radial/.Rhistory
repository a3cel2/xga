collapse = '/'
),
width = 14,
height = 7
)
Cairo::CairoFonts(regular = "Arial:style=Regular", italic="Arial:style=Italic")
lm_coefficient_heatmap_v2(
lm_results_full,
blue_black_orange
)
dev.off()
#Manually coded grid version - works better for 'wide'
#heatmap
lm_coefficient_heatmap_v2 <- function(lm_results,
color_scale,
limits = c(-0.5,0.5),
nbreaks = 400,
only_overlapping = F,
na.color = rgb(0.8,0.8,0.8),
col_palette = 'Greys'){
matr <- create_lm_matrix(lm_results,only_overlapping=only_overlapping)
dd <- dim(matr)
label <- unique(class)
dist <- dist(t(matr))
hc <- hclust(dist,method="complete")
dend <- as.dendrogram(hc)
res <- ReorderCluster::RearrangeJoseph(hc,as.matrix(dist),class,cpp=F)
hcl <- res$hcl
matr <- matr[,hcl$order]
#Fix the names
comb_symbol <- '∆'
rownames(matr) <- sapply(rownames(matr),function(name){
name <- strsplit(name,split=':')[[1]]
name <- sapply(name,function(name){paste(c(tolower(name), comb_symbol),collapse='')})
if(length(name) > 1){
name <- c('ε ',name)
}
return(paste(name,collapse=''))
})
colnames(matr) <- sapply(colnames(matr),function(name){
strsplit(name, split = '_')[[1]][1]
})
row_index <- sort(sapply(rownames(matr),function(name){length(strsplit(name,split=comb_symbol)[[1]])}),index.return=T)$ix
matr <- matr[row_index, ]
matr <- t(matr)
colors <- color_scale(nbreaks)
breaks <- seq(limits[1],limits[2],length.out = 400)
par(mar=c(15,5,5,0))
plot(xlim = c(0,1),
ylim = c(0,1),
axes = F,
x = NULL,
y = NULL,
xlab = '',
ylab = '')
par(xpd = T)
for(i in 1:nrow(matr)){
for(j in 1:ncol(matr)){
val <-  matr[i,j]
my_col <- colors[which.min(abs(breaks - val))]
if(val == 0){
my_col <- na.color
}
rect(xright = (j+0.5)/ncol(matr),
xleft = (j-0.5)/ncol(matr),
ytop = (i+0.5)/nrow(matr),
ybottom = (i-0.5)/nrow(matr),
col = my_col,
pch = 16,
cex = 5,
lwd = 0.5)
}
}
ixn_complexity <- sapply(colnames(matr),function(x){length(strsplit(x,split='∆')[[1]])})
col_cols <- RColorBrewer::brewer.pal(max(ixn_complexity),col_palette)
for(i in 1:nrow(matr)){
text(0,(i - 0.2)/nrow(matr),rownames(matr)[i],adj=c(1,0))
}
for(j in unique(ixn_complexity)){
xright_pos <- (max(which(ixn_complexity == j)) + 0.5)/ncol(matr)
rect(xleft = (min(which(ixn_complexity == j)) - 0.5)/ncol(matr),
xright = xright_pos,
ytop = 1 + 1.5/nrow(matr),
ybottom = 1 + 0.7/nrow(matr),
col = col_cols[j])
}
for(j in unique(ixn_complexity)){
xright_pos <- (max(which(ixn_complexity == j)) + 0.5)/ncol(matr)
lines(c(xright_pos, xright_pos), c(-0/nrow(matr),1 + 2.5/nrow(matr)),lwd=2)
}
for(j in 1:ncol(matr)){
split_name <- strsplit(colnames(matr)[j],split=' ')[[1]]
if (length(split_name) > 1) {
split_name_p2 <- strsplit(split_name[2], split = '∆')[[1]]
plot_text <-
parse(text = paste(c(
'italic(epsilon*~',
paste(split_name_p2, collapse = '*Delta*~~'),
'*Delta)'
), collapse = ''))
}else{
split_name_p2 <- strsplit(split_name[1], split = '∆')[[1]]
plot_text <-
parse(text = paste(c(
'italic(',
split_name_p2,
'*Delta)'
), collapse = ''))
}
text(j / ncol(matr),
0,
plot_text,
srt = 75,
adj = c(1, 0.5))
# split_name <- strsplit(colnames(matr)[30],split=' ')[[1]]
#
# if(length(split_name) > 1){
#   split_name_p2 <- strsplit(split_name[2], split = '∆')[[1]]
#   plot_text <-
#     parse(text = paste(c(
#       'italic(epsilon*',
#       paste(split_name_p2, collapse = '*Delta*'),
#       '*Delta)'
#     ), collapse = ''))
}
#if(grepl('∆',split_name[2])){
#
#}
}
setwd(this.dir)
setwd(output_data_directory)
#This loads the 'lm_results' variable
load(lm_output_file)
setwd(this.dir)
dir.create(paste(c(output_results_directory, 'heatmaps'), collapse = '/'), showWarnings = FALSE)
Cairo::CairoFonts(regular = "Arial:style=Regular", italic="Arial:style=Italic")
Cairo::CairoPDF(
file = paste(
c(
output_results_directory,
'heatmaps',
'linear_coefficient_heatmap.pdf'
),
collapse = '/'
),
width = 14,
height = 7
)
Cairo::CairoFonts(regular = "Arial:style=Regular", italic="Arial:style=Italic")
lm_coefficient_heatmap_v2(
lm_results_full,
blue_black_orange
)
dev.off()
lm_coefficient_heatmap_v2 <- function(lm_results,
color_scale,
limits = c(-0.5,0.5),
nbreaks = 400,
only_overlapping = F,
na.color = rgb(0.8,0.8,0.8),
col_palette = 'Greys'){
matr <- create_lm_matrix(lm_results,only_overlapping=only_overlapping)
dd <- dim(matr)
label <- unique(class)
dist <- dist(t(matr))
hc <- hclust(dist,method="complete")
dend <- as.dendrogram(hc)
res <- ReorderCluster::RearrangeJoseph(hc,as.matrix(dist),class,cpp=F)
hcl <- res$hcl
matr <- matr[,hcl$order]
#Fix the names
comb_symbol <- '∆'
rownames(matr) <- sapply(rownames(matr),function(name){
name <- strsplit(name,split=':')[[1]]
name <- sapply(name,function(name){paste(c(tolower(name), comb_symbol),collapse='')})
if(length(name) > 1){
name <- c('ε ',name)
}
return(paste(name,collapse=''))
})
colnames(matr) <- sapply(colnames(matr),function(name){
strsplit(name, split = '_')[[1]][1]
})
row_index <- sort(sapply(rownames(matr),function(name){length(strsplit(name,split=comb_symbol)[[1]])}),index.return=T)$ix
matr <- matr[row_index, ]
matr <- t(matr)
colors <- color_scale(nbreaks)
breaks <- seq(limits[1],limits[2],length.out = 400)
par(mar=c(15,5,5,0))
plot(xlim = c(0,1),
ylim = c(0,1),
axes = F,
x = NULL,
y = NULL,
xlab = '',
ylab = '')
par(xpd = T)
for(i in 1:nrow(matr)){
for(j in 1:ncol(matr)){
val <-  matr[i,j]
my_col <- colors[which.min(abs(breaks - val))]
if(val == 0){
my_col <- na.color
}
rect(xright = (j+0.5)/ncol(matr),
xleft = (j-0.5)/ncol(matr),
ytop = (i+0.5)/nrow(matr),
ybottom = (i-0.5)/nrow(matr),
col = my_col,
pch = 16,
cex = 5,
lwd = 0.5)
}
}
ixn_complexity <- sapply(colnames(matr),function(x){length(strsplit(x,split='∆')[[1]])})
col_cols <- RColorBrewer::brewer.pal(max(ixn_complexity),col_palette)
for(i in 1:nrow(matr)){
text(0,(i - 0.2)/nrow(matr),rownames(matr)[i],adj=c(1,0))
}
for(j in unique(ixn_complexity)){
xright_pos <- (max(which(ixn_complexity == j)) + 0.5)/ncol(matr)
rect(xleft = (min(which(ixn_complexity == j)) - 0.5)/ncol(matr),
xright = xright_pos,
ytop = 1 + 1.5/nrow(matr),
ybottom = 1 + 0.7/nrow(matr),
col = col_cols[j])
}
for(j in unique(ixn_complexity)){
xright_pos <- (max(which(ixn_complexity == j)) + 0.5)/ncol(matr)
lines(c(xright_pos, xright_pos), c(-0/nrow(matr),1 + 2.5/nrow(matr)),lwd=2)
}
for(j in 1:ncol(matr)){
split_name <- strsplit(colnames(matr)[j],split=' ')[[1]]
if (length(split_name) > 1) {
split_name_p2 <- strsplit(split_name[2], split = '∆')[[1]]
plot_text <-
parse(text = paste(c(
'italic(epsilon*~',
paste(split_name_p2, collapse = '*Delta*~~'),
'*Delta)'
), collapse = ''))
}else{
split_name_p2 <- strsplit(split_name[1], split = '∆')[[1]]
plot_text <-
parse(text = paste(c(
'italic(',
split_name_p2,
'*Delta)'
), collapse = ''))
}
text(j / ncol(matr),
0,
plot_text,
srt = 60,
adj = c(1, 0.5))
# split_name <- strsplit(colnames(matr)[30],split=' ')[[1]]
#
# if(length(split_name) > 1){
#   split_name_p2 <- strsplit(split_name[2], split = '∆')[[1]]
#   plot_text <-
#     parse(text = paste(c(
#       'italic(epsilon*',
#       paste(split_name_p2, collapse = '*Delta*'),
#       '*Delta)'
#     ), collapse = ''))
}
#if(grepl('∆',split_name[2])){
#
#}
}
setwd(this.dir)
setwd(output_data_directory)
#This loads the 'lm_results' variable
load(lm_output_file)
setwd(this.dir)
dir.create(paste(c(output_results_directory, 'heatmaps'), collapse = '/'), showWarnings = FALSE)
Cairo::CairoFonts(regular = "Arial:style=Regular", italic="Arial:style=Italic")
Cairo::CairoPDF(
file = paste(
c(
output_results_directory,
'heatmaps',
'linear_coefficient_heatmap.pdf'
),
collapse = '/'
),
width = 14,
height = 7
)
Cairo::CairoFonts(regular = "Arial:style=Regular", italic="Arial:style=Italic")
lm_coefficient_heatmap_v2(
lm_results_full,
blue_black_orange
)
dev.off()
lm_results_full
lm_results_full$term_names
unlist(lm_results_full$term_names)
length(unlist(lm_results_full$term_names))
sqrt(0.005)
54/500
(54/500)*130
(54/500)*(44*3)
(54/500)*(44*4)
?keras::fit
getOption("keras.fit_verbose", default = 1)
seq(-4,-2,by=0.3)
x <- c(seq(0,1,length.out=1000),seq(1,2,lengt.out=1000))
x <- c(seq(0,1,length.out=1000),seq(1,2,length.out=1000))
y <- c(e^(1.5*x[1:1000]),e^(2*x[1001:2000]))
e <- exp(1)
y <- c(e^(1.5*x[1:1000]),e^(2*x[1001:2000]))
plot(x,y)
setwd(this.dir)
setwd(input_data_directory)
mapping_file <- read.table(mapping_filename, head = T, row.names = 1)
setwd(this.dir)
setwd(output_data_directory)
A_resistance_file <- read.table(A_resistance_filename)
alpha_resistance_file <- read.table(alpha_resistance_filename)
A_genotyping_df <- mapping_file[rownames(A_resistance_file), ]
alpha_genotyping_df <-
mapping_file[rownames(alpha_resistance_file), ]
ctrl_list <- list(
'all' = c(
#'benomyl',
'camptothecin',
'tamoxifen',
'methotrexate',
'ketoconazole',
'cycloheximide',
#'ketoconazole',
'fluconazole',
'beauvericin',
'bisantrene',
'valinomycin',
'mitoxantrone'
),
'all_presentation_ver' = c(
'benomyl',
'camptothecin',
'tamoxifen',
'methotrexate',
'ketoconazole',
'fluconazole',
'beauvericin',
'bisantrene',
'valinomycin',
'mitoxantrone',
'cycloheximide'
),
'other' = c(
#'fluconazole',
'cisplatin',
'itraconazole',
'miconazole',
'colchicine',
'imatinib'
)
)
for (i in 2){#1:length(ctrl_list)) {
setwd(this.dir)
setwd(output_results_directory)
exhaustive_radial_landscape_drawing(
A_resistance_file,
alpha_resistance_file,
A_genotyping_df,
alpha_genotyping_df,
color_function = blue_black_orange,
drugs = ctrl_list[[i]],
drawn_genes = names(my_gene_colors),
filename = names(ctrl_list[i]),
dpi = 50,
#drawn_genes=names(my_gene_colors),
color_map = blue_black_orange,
nrows_all_genes = 4,#ceiling(length(ctrl_list[[i]]) /
#          2),
mating_types = c('A', 'alpha'),
sig_threshold_marginal = 0.05,
maximum_degree = 4,
border_color = rgb(0.1, 0.1, 0.1, 0.1),
sidebyside = F,
all_drugs_combined = T,
draw_title = F,
keep_title_margins = T,
output_results_directory = 'fitness_landscape_graphs_radial',
p_cutoff = 1e09
)
}
plot_control_list <-
list(
list(
drug = 'benomyl',
depth = 1,
mating_type = 'A',
plot_width = 9.6 / 3,
plot_height = 9.6 / 3
),
list(
drug = 'benomyl',
depth = 2,
mating_type = 'A',
plot_width = 9.6 / 2,
plot_height = 9.6 / 2
),
list(
drug = 'benomyl',
depth = 5,
mating_type = 'A',
plot_width = 9.6,
plot_height = 9.6
),
list(
drug = 'benomyl',
depth = 5,
mating_type = 'alpha',
plot_width = 9.6,
plot_height = 9.6
),
list(
drug = 'fluconazole',
depth = 5,
mating_type = 'A',
plot_width = 9.6,
plot_height = 9.6
),
list(
drug = 'fluconazole',
depth = 5,
mating_type = 'alpha',
plot_width = 9.6,
plot_height = 9.6
)
)
ctrl_list <- list(
'all' = c(
#'benomyl',
'camptothecin',
'tamoxifen',
'methotrexate',
'ketoconazole',
'cycloheximide',
#'ketoconazole',
'fluconazole',
'beauvericin',
'bisantrene',
'valinomycin',
'mitoxantrone'
),
'all_presentation_ver' = c(
'benomyl',
'camptothecin',
'tamoxifen',
'methotrexate',
'cisplatin',
'ketoconazole',
'fluconazole',
'beauvericin',
'bisantrene',
'valinomycin',
'mitoxantrone',
'cycloheximide'
),
'other' = c(
#'fluconazole',
'cisplatin',
'itraconazole',
'miconazole',
'colchicine',
'imatinib'
)
)
for (i in 2){#1:length(ctrl_list)) {
setwd(this.dir)
setwd(output_results_directory)
exhaustive_radial_landscape_drawing(
A_resistance_file,
alpha_resistance_file,
A_genotyping_df,
alpha_genotyping_df,
color_function = blue_black_orange,
drugs = ctrl_list[[i]],
drawn_genes = names(my_gene_colors),
filename = names(ctrl_list[i]),
dpi = 50,
#drawn_genes=names(my_gene_colors),
color_map = blue_black_orange,
nrows_all_genes = 4,#ceiling(length(ctrl_list[[i]]) /
#          2),
mating_types = c('A', 'alpha'),
sig_threshold_marginal = 0.05,
maximum_degree = 4,
border_color = rgb(0.1, 0.1, 0.1, 0.1),
sidebyside = F,
all_drugs_combined = T,
draw_title = F,
keep_title_margins = T,
output_results_directory = 'fitness_landscape_graphs_radial',
p_cutoff = 1e09
)
}
360/6
choose(16,5)
choose(16,5)+choose(16,4)
choose(16,5)+choose(16,4)+choose(16,3)
choose(16,5)+choose(16,4)+choose(16,3)+choose(16,2)
choose(16,5)+choose(16,4)+choose(16,3)+choose(16,2)+16
(choose(16,5)+choose(16,4)+choose(16,3)+choose(16,2)+16)*16
15*16
15*16 + 16
15*16 + 16 + 16*16 + 16
3+2+4+4+1+1
