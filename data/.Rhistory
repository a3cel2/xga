setwd(this.dir)
#Fixes bug with Mac OS update
dyn.load('/Applications/Jalview/jre/Contents/Home/lib/server/libjvm.dylib')
########
# Colour parameters
########
#
# Master colour scale for heatmap-style plots
my_color_list <- c(
rgb(1, 0.45, 0.25),
rgb(0.8, 0.25, 0.25),
rgb(0, 0, 0),
rgb(0.25, 0.45, 0.8),
rgb(0.25, 0.75, 1)
)
# Gene colours for drawing legends
my_gene_colors <- list(
'PDR5' = rgb(47, 144, 206, maxColorValue = 255),
'SNQ2' = rgb(179, 231, 172, maxColorValue = 255),
'YOR1' = rgb(233, 153, 76, maxColorValue = 255),
'YBT1' = rgb(255, 255, 191, maxColorValue = 255),
'YCF1' = rgb(166, 7, 13, maxColorValue = 255)#,
#'BPT1' = rgb(32, 32, 32, maxColorValue = 255)
)
# Three and two gene colour scales generated by my_color_list
blue_black_orange <- grDevices::colorRampPalette(my_color_list)
black_blue <- grDevices::colorRampPalette(my_color_list[3:5])
# Package containing main scripts
devtools::load_all('../packages/twasAnalysis')
devtools::document('../packages/twasAnalysis')
########
# Where to read/write files
########
#
# Raw data directory
input_data_directory <- '../data/'
# Processed data directory
output_data_directory <- '../data/output'
# Individual growth experiments are in their own subfolder
# in the input data directory
tecan_output_path <- 'tecan_analysis'
qrt_pcr_output_path <- 'qrt_pcr'
nn_output_dir <- 'nn_analysis'
# Genotyping files
all_twas_strains <- 'all_twas_strains.tsv'
extra_genotying_data <- 'extra_genotyping.tsv'
# Map of strain IDs to genotypes
mapping_filename <- 'twas_id_map_fixed.tsv'
# Previously-called genotyping accuracy
genotyping_accuracy_file <- 'leave-one-out-x-validation07192013.tsv'
########
# Run-specific configuration
########
#
# Stores parameters for separate runs
parameter_file <- 'sample_parameters.tsv'
# Sample name
sample <- 'X14.Nov.update'
#
# Parameters from this file are set below
#
# Read sample-specific variables
setwd(input_data_directory)
sample_pars <- read.table(parameter_file, stringsAsFactors = F)
sample_vals <- sample_pars[, sample]
# Set sample-specific variables from parameter file
# Sub-folder to create 'deliverables' (figures, data, etc)
output_results_directory <- sample_vals[1]
# What to call the run-specific resistances generated (deprecated)
resistance_output_prefix <- sample_vals[2]
# What to call the run-specific linear model
lm_output_file <- sample_vals[3]
# Processed sequencing data to read
sequencing_filename <- sample_vals[4]
# What to call the run-specific resistances generated (MATa)
A_resistance_filename <- sample_vals[5]
# What to call the run-specific resistances generated (MATalpha)
alpha_resistance_filename <- sample_vals[6]
# Name of file specifying what the solvent control is for each drug
# if 'none', default parameters are used for many functions
drug_control_pair <- sample_vals[7]
if (drug_control_pair == 'none') {
drug_control_pair <- NULL
}
########
# Pre-run maintenance
########
#
# global control of what metric is used for analysis
#  'resistance' - compares growth in each drug to control
#  'growth' - takes growth in each drug as-is
growth_metric <- 'resistance'#growth'
# Create Sub directories for output if they don't exist
dir.create(output_data_directory, showWarnings = FALSE)
dir.create(output_results_directory, showWarnings = FALSE)
# Linear model input results, defaults to the same file as the output file
lm_input_file <- lm_output_file
########
# TASK CONTROL
########
#
# Specify which part of the analysis to run
#
# OPTIONS:
#
# 'all' - runs all tasks
#
# 'Create genotyping data' - processes initial
#   genotyping results to arrive at final set
#   of genotypes
#
# 'Create resistance metrics' - processes
#   sequencing data to arrive at resistance or growth
#   scores for each strain
##
# 'Genotyping Accuracy'
#   makes a plot evaluating genotyping accuracy and linkage
#
# 'Linear model'
#   creates genotype-phenotype associations using a
#   linear model, stores the results
#
# 'Pool Genotype Group Comparison'
#   groups strains by PDR5/SNQ2/YOR1/YBT1/YCF1/BPT1
#   genotype and compares group averages between
#   MATa and MATalpha pools
#
# 'Linear model scatterplot'
#   creates a plot of linear model predictions
#   in both same pool and opposite pool
#   as trained data
#
# 'Linear coefficient heatmap'
#   creates a heatmap of the linear
#   modelling results
#
# 'Heatmap Fitness Landscape'
#   draws a heatmap based on average group resistances
#
# 'Linear Fitness Landscape'
#   draws various 'linear' fitness landscapes
#
# 'Fitness Density Plot'
#   draws a density plot for resistances of different
#   groups (currently only fluconazole)
#
# 'Radial Fitness Landscape'
#   draws various 'radial' fitness landscapes
#
# 'Analyze Tecan Data'
#   all automated analysis of single-strain growth
#   assays
use_session_with_seed(1234)
arglist <-
list(
'resistance_file' = both_res_file,
'genotype_file' = mapfile,
'condition_name' = 'fluconazole_both',
'genes' = genes,
'efflux_genes' = c('PDR5','SNQ2'),
'regularization_rate' = 5e-04,
'learning_rate' = 0.05,
'epochs' = 10000,
'batch_size' = round(0.3*nrow(mapfile))
)
nn_fluc_three_layer <- do.call(make_three_layer_nn_model, arglist)
get_weights(nn_fluc_three_layer$model)
k_clear_session()
use_session_with_seed(1234)
arglist <-
list(
'resistance_file' = both_res_file,
'genotype_file' = mapfile,
'condition_name' = 'fluconazole_both',
'genes' = genes,
'efflux_genes' = c('PDR5','SNQ2'),
'regularization_rate' = 0,
'learning_rate' = 0.05,
'epochs' = 10000,
'batch_size' = round(0.3*nrow(mapfile))
)
nn_fluc_three_layer <- do.call(make_three_layer_nn_model, arglist)
get_weights(nn_fluc_three_layer$model)
genes
genes[genes != 'PDR5']
c(genes[genes != 'PDR5'])[11]
c(genes[genes != 'PDR5'])[1]
c(genes[genes != 'PDR5'])[3]
k_clear_session()
use_session_with_seed(1234)
arglist <-
list(
'resistance_file' = both_res_file,
'genotype_file' = mapfile,
'condition_name' = 'fluconazole_both',
'genes' = genes,
'efflux_genes' = c('PDR5','SNQ2'),
'regularization_rate' = 5e-05,
'learning_rate' = 0.05,
'epochs' = 10000,
'batch_size' = round(0.3*nrow(mapfile))
)
nn_fluc_three_layer <- do.call(make_three_layer_nn_model, arglist)
get_weights(nn_fluc_three_layer$model)
arglist <-
list(
'resistance_file' = both_res_file,
'genotype_file' = mapfile,
'condition_name' = 'fluconazole_both',
'genes' = genes,
'efflux_genes' = 'PDR5',
'regularization_rate' = 5e-04,
'learning_rate' = 0.05,
'epochs' = 10000,
'batch_size' = round(0.3*nrow(mapfile))
)
nn_fluc <- do.call(make_nn_model, arglist)
get_weights(nn_fluc$model)
use_session_with_seed(1234)
weight_list <- list()
for (i in 1:10) {
nn_fluc <- do.call(make_nn_model, arglist)
weight_list[[length(weight_list) + 1]] <-
get_weights(nn_fluc$model)
}
k_clear_session()
use_session_with_seed(1234)
weight_list <- list()
for (i in 1:10) {
nn_fluc <- do.call(make_nn_model, arglist)
weight_list[[length(weight_list) + 1]] <-
get_weights(nn_fluc$model)
}
averaged_weight_list <- prune_weight_list(weight_list)
averaged_weight_list
set_weights(nn_fluc$model, averaged_weight_list)
sig_features <- nn_p_value_testing(
nn_fluc$model,
genotype_file = mapfile,
resistance_file = both_res_file,
condition_name = 'fluconazole_both',
nn_model_function = make_nn_model,
nn_model_parameters = arglist,
diff_tolerance = 1e-04
)
sig_features
set_weights(nn_fluc$model,sig_features)
compare_nn_predictions(
nn_fluc$model,
mapfile,
both_res_file[,'fluconazole_both',drop=F],
genes_to_predict = genes,
drug = 'fluconazole',
genes_to_split = c('SNQ2', 'PDR5', 'YBT1', 'YCF1', 'YOR1'),
gene_palette = my_gene_colors
)
k_clear_session()
library(Cairo)
library(animation)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
#Fixes bug with Mac OS update
dyn.load('/Applications/Jalview/jre/Contents/Home/lib/server/libjvm.dylib')
########
# Colour parameters
########
#
# Master colour scale for heatmap-style plots
my_color_list <- c(
rgb(1, 0.45, 0.25),
rgb(0.8, 0.25, 0.25),
rgb(0, 0, 0),
rgb(0.25, 0.45, 0.8),
rgb(0.25, 0.75, 1)
)
# Gene colours for drawing legends
my_gene_colors <- list(
'PDR5' = rgb(47, 144, 206, maxColorValue = 255),
'SNQ2' = rgb(179, 231, 172, maxColorValue = 255),
'YOR1' = rgb(233, 153, 76, maxColorValue = 255),
'YBT1' = rgb(255, 255, 191, maxColorValue = 255),
'YCF1' = rgb(166, 7, 13, maxColorValue = 255)#,
#'BPT1' = rgb(32, 32, 32, maxColorValue = 255)
)
# Three and two gene colour scales generated by my_color_list
blue_black_orange <- grDevices::colorRampPalette(my_color_list)
black_blue <- grDevices::colorRampPalette(my_color_list[3:5])
# Package containing main scripts
devtools::load_all('../packages/twasAnalysis')
devtools::document('../packages/twasAnalysis')
########
# Where to read/write files
########
#
# Raw data directory
input_data_directory <- '../data/'
# Processed data directory
output_data_directory <- '../data/output'
# Individual growth experiments are in their own subfolder
# in the input data directory
tecan_output_path <- 'tecan_analysis'
qrt_pcr_output_path <- 'qrt_pcr'
nn_output_dir <- 'nn_analysis'
# Genotyping files
all_twas_strains <- 'all_twas_strains.tsv'
extra_genotying_data <- 'extra_genotyping.tsv'
# Map of strain IDs to genotypes
mapping_filename <- 'twas_id_map_fixed.tsv'
# Previously-called genotyping accuracy
genotyping_accuracy_file <- 'leave-one-out-x-validation07192013.tsv'
########
# Run-specific configuration
########
#
# Stores parameters for separate runs
parameter_file <- 'sample_parameters.tsv'
# Sample name
sample <- 'X14.Nov.update'
#
# Parameters from this file are set below
#
# Read sample-specific variables
setwd(input_data_directory)
sample_pars <- read.table(parameter_file, stringsAsFactors = F)
sample_vals <- sample_pars[, sample]
# Set sample-specific variables from parameter file
# Sub-folder to create 'deliverables' (figures, data, etc)
output_results_directory <- sample_vals[1]
# What to call the run-specific resistances generated (deprecated)
resistance_output_prefix <- sample_vals[2]
# What to call the run-specific linear model
lm_output_file <- sample_vals[3]
# Processed sequencing data to read
sequencing_filename <- sample_vals[4]
# What to call the run-specific resistances generated (MATa)
A_resistance_filename <- sample_vals[5]
# What to call the run-specific resistances generated (MATalpha)
alpha_resistance_filename <- sample_vals[6]
# Name of file specifying what the solvent control is for each drug
# if 'none', default parameters are used for many functions
drug_control_pair <- sample_vals[7]
if (drug_control_pair == 'none') {
drug_control_pair <- NULL
}
########
# Pre-run maintenance
########
#
# global control of what metric is used for analysis
#  'resistance' - compares growth in each drug to control
#  'growth' - takes growth in each drug as-is
growth_metric <- 'resistance'#growth'
# Create Sub directories for output if they don't exist
dir.create(output_data_directory, showWarnings = FALSE)
dir.create(output_results_directory, showWarnings = FALSE)
# Linear model input results, defaults to the same file as the output file
lm_input_file <- lm_output_file
########
# TASK CONTROL
########
#
# Specify which part of the analysis to run
#
# OPTIONS:
#
# 'all' - runs all tasks
#
# 'Create genotyping data' - processes initial
#   genotyping results to arrive at final set
#   of genotypes
#
# 'Create resistance metrics' - processes
#   sequencing data to arrive at resistance or growth
#   scores for each strain
##
# 'Genotyping Accuracy'
#   makes a plot evaluating genotyping accuracy and linkage
#
# 'Linear model'
#   creates genotype-phenotype associations using a
#   linear model, stores the results
#
# 'Pool Genotype Group Comparison'
#   groups strains by PDR5/SNQ2/YOR1/YBT1/YCF1/BPT1
#   genotype and compares group averages between
#   MATa and MATalpha pools
#
# 'Linear model scatterplot'
#   creates a plot of linear model predictions
#   in both same pool and opposite pool
#   as trained data
#
# 'Linear coefficient heatmap'
#   creates a heatmap of the linear
#   modelling results
#
# 'Heatmap Fitness Landscape'
#   draws a heatmap based on average group resistances
#
# 'Linear Fitness Landscape'
#   draws various 'linear' fitness landscapes
#
# 'Fitness Density Plot'
#   draws a density plot for resistances of different
#   groups (currently only fluconazole)
#
# 'Radial Fitness Landscape'
#   draws various 'radial' fitness landscapes
#
# 'Analyze Tecan Data'
#   all automated analysis of single-strain growth
#   assays
arglist <-
list(
'resistance_file' = both_res_file,
'genotype_file' = mapfile,
'condition_name' = 'fluconazole_both',
'genes' = genes,
'efflux_genes' = genes,
'regularization_rate' = 5e-04,
'learning_rate' = 0.05,
'epochs' = 10000,
'batch_size' = round(0.3*nrow(mapfile))
)
use_session_with_seed(1234)
weight_list <- list()
for (i in 1:10) {
nn_fluc <- do.call(make_nn_model, arglist)
weight_list[[length(weight_list) + 1]] <-
get_weights(nn_fluc$model)
}
sapply(weight_list,unlist)
apply(sapply(weight_list,unlist),2,max)
averaged_weight_list <- prune_weight_list(weight_list)
averaged_weight_list
set_weights(nn_fluc$model, averaged_weight_list)
sig_features <- nn_p_value_testing(
nn_fluc$model,
genotype_file = mapfile,
resistance_file = both_res_file,
condition_name = 'fluconazole_both',
nn_model_function = make_nn_model,
nn_model_parameters = arglist,
diff_tolerance = 1e-04
)
sig_features
set_weights(nn_fluc$model,sig_features)
compare_nn_predictions(
nn_fluc$model,
mapfile,
both_res_file[,'fluconazole_both',drop=F],
genes_to_predict = genes,
drug = 'fluconazole',
genes_to_split = c('SNQ2', 'PDR5', 'YBT1', 'YCF1', 'YOR1'),
gene_palette = my_gene_colors
)
abline(c(0,1))
compare_nn_predictions(
nn_fluc_three_layer$model,
mapfile,
both_res_file[,'fluconazole_both',drop=F],
genes_to_predict = genes,
drug = 'fluconazole',
genes_to_split = c('SNQ2', 'PDR5', 'YBT1', 'YCF1', 'YOR1'),
gene_palette = my_gene_colors
)
pdf(file = sprintf('nn_performance_fluconazole_both_single_environment_training.pdf',drug),
width = 4,
height = 4)
compare_nn_predictions(
nn_fluc$model,
mapfile,
both_res_file[,'fluconazole_both',drop=F],
genes_to_predict = genes,
drug = 'fluconazole',
genes_to_split = c('SNQ2', 'PDR5', 'YBT1', 'YCF1', 'YOR1'),
gene_palette = my_gene_colors
)
dev.off()
getwd()
args(nn_model_search)
0.3*nrow(both_res_file)
batch_size = round(0.3*nrow(both_res_file)
)
batch_size
round(0.3*length(alpha_ind))
round(0.3*length(A_ind))
round(exp(-1)*length(A_ind))
seq(-6, 0, length.out = 11)
10^seq(-6, 0, length.out = 11)
seq(-6, 0, length.out = 11)
seq(-6, 0, length.out = 12)
seq(-6, 0, length.out = 13)
ranges_tested = c('-3_-4_11','-6_0_13')
range_tested <- ranges_test[1]
range_tested <- ranges_tested[1]
range_tested <- strsplit(range_tested,split='_')[[1]]
range_tested
int('03')
int('-3')
as.numeric('-3')
regs <-
10 ^ seq(as.numeric(range_tested[1]),
as.numeric(range_tested[2]),
length.out = as.numeric(range_tested[3]))
regs
filename <- sprintf('performance_data_10_%s_%s',range_tested[1],range_tested[2])
filename
filename <- sprintf('mse_vs_reg_rate_%s_%s.pdf',range_tested[1],range_tested[2])
filename
for(range_tested in ranges_tested) {print(range_tested)}
filename <- sprintf('mse_vs_reg_nparam_%s_%s.pdf',range_tested[1],range_tested[2])
