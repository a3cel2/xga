hist(drug_estim)
hist(drug_estim,breaks=10)
hist(drug_estim,breaks=100)
hist(ctrl_estim,breaks=100)
hist(gees)
hist(gees,breaks=100)
plot(gees,ctrl_estim)
abline(c(0,1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/advanced_fitness_calc_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/advanced_fitness_calc_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
g_s
hist(g_s)
sum(is.na(g_s))
g_s <- g_s[!is.na(g_s)]
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(v_auc,gees)
abline(c(0,1))
plot(v_auc,gees,xlum=c(0.2,0.6))
plot(v_auc,gees,xlim=c(0.2,0.6))
plot(v_auc,gees,xlim=c(0.2,0.6),ylim=c(0,0.6))
plot(v_auc,gees,xlim=c(0.2,0.6),ylim=c(0,0.7))
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(v_auc,gees,xlim=c(0.2,0.6),ylim=c(0,0.7))
plot(v_auc,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(v_auc,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(v_auc,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
depths
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
dbinom(1,100,1)
dbinom(1,100,1,log=T)
-dbinom(1,100,1,log=T)
-dbinom(1,100,0.99,log=T)
-dbinom(1,100,0.99999,log=T)
-dbinom(1,100,0,log=T)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
warnings()
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(v_auc,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(v_auc,gees)
plot(lul,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
gens_wt
gens
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
abline(c(0,1))
plot(v_auc,gees)
abline(c(0,1))
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(v_auc,gees)
plot(lul,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
plot(v_auc,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(v_auc,gees)
plot(lul,gees)
gens_wt
gens
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
abline(c(0,1))
gens
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
abline(c(0,1))
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
abline(c(0,1))
plot(lul,gees)
abline(c(0,1))
gens
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
abline(c(0,1))
?rpois
rpois(1,0.8)
rpois(1,0.8)
rpois(1,0.8)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
depths
plot(lul,gees)
abline(c(0,1))
nstrains
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
abline(c(0,1))
gens_wt
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
abline(c(0,1))
abline(c(0,1),col='red')
gens <- gens_wt
v_auc <- apply(sampled_freqs,1,function(freq){
log2(rhombus_integration(c(0,gens),freq*(2^c(0,gens)))/freq[1])/max(gens)
})
plot(v_auc,gees)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
abline(c(0,1))
abline(c(0,1),col='red',lwd=2)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
abline(c(0,1),col='red',lwd=2)
plot(lul,gees)
abline(c(0,1),col='red',lwd=2)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
abline(c(0,1),col='red',lwd=2)
plot(lul,gees)
abline(c(0,1),col='red',lwd=2)
gens <- c(5,10,15,20)
gens <- max(gens)*(gens^1.5/max(gens^1.5))
gens
gens <- c(5,10,15,20)
gens <- max(gens)*(gens^1.2/max(gens^1.2))
gens
gens <- c(5,10,15,20)
gens <- max(gens)*(gens^1.2/max(gens^1.2)) + rnorm(4)
gens
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
abline(c(0,1))
gens_wt
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
plot(lul,gees)
g
gens
abline(c(0,1))
g_d_estim <- lul
g_d_real <- gees
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/exact_fitness_calc.R', echo=TRUE)
g_s_real <- gees
g_s_estim <- lul
plot(g_d_estim/g_s_estim)
plot(g_s_estim,g_d_estim/g_s_estim,ylim=c(0,1))
plot(g_s_estim,g_d_estim/g_s_estim,ylim=c(0,2))
plot(g_s_estim,g_d_estim/g_s_estim,ylim=c(0,2),xlim=c(0.8,1))
plot(g_s_estim,g_d_estim/g_s_estim,ylim=c(0,2),xlim=c(0.8,1.5))
plot(g_s_estim,g_d_estim/g_s_estim,ylim=c(0,2),xlim=c(0.8,1.1))
g
gens
g_s
plot(g_d,g_s)
source('~/.active-rstudio-document', echo=TRUE)
lm(g_d~g_s)
library(MASS)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/advanced_fitness_calc_v2.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R', echo=TRUE)
warnings()
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/scratch/advanced_fitness_calc_v2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
lm(g_d~g_s)
boxcox(g_d~g_s)
ey <- boxcox(g_d~g_s)
names(ey)
ey$x
ey$y
powerTransform <- function(y, lambda1, lambda2 = NULL, method = "boxcox") {
boxcoxTrans <- function(x, lam1, lam2 = NULL) {
# if we set lambda2 to zero, it becomes the one parameter transformation
lam2 <- ifelse(is.null(lam2), 0, lam2)
if (lam1 == 0L) {
log(y + lam2)
} else {
(((y + lam2)^lam1) - 1) / lam1
}
}
switch(method
, boxcox = boxcoxTrans(y, lambda1, lambda2)
, tukey = y^lambda1
)
}
bc <- boxcox(g_d~g_s)
lambda <- bc$x[which.max(bc$y)]
lambda
powerTransform(g_d,lambda)
plot(powerTransform(g_d,lambda),g_s)
plot(g_s,powerTransform(g_d,lambda))
g_d_new <- powerTransform(g_d,lambda)
plot(g_s,g_d_new/g_s)
plot(g_s,g_d_new/)
plot(g_s,g_d_new)
plot(g_s,2^g_d_new)
g_d_new <- g_d_new - min(g_d_new) + 0.1
plot(g_s,g_d_new)
g_d_new
g_d_new <- powerTransform(g_d,lambda)
min(g_d_new)
is.na(g_d_new)
sum(is.na(g_d_new))
sum(is.na(g_d))
g_d_new <- g_d_new - min(g_d_new,na.rm=T) + 0.1
plot(g_s,g_d_new)
g_d_new <- g_d_new/2
plot(g_s,g_d_new/g_s)
plot(g_s,g_d_new/g_s,xlim=c(0.1,1.1))
plot(g_s,g_d_new/g_s,xlim=c(0.1,1.1),ylim=c(0,1))
plot(g_s,g_d_new/g_s,xlim=c(0.1,1.1),ylim=c(0,2))
rat <- g_d/g_s
bc <- boxcox(rat~g_s)
lambda <- bc$x[which.max(bc$y)]
lambda
rat_new <- powerTransform(rat,lambda)
plot(g_s,rat)
plot(g_s,rat,ylim=c(0,2))
plot(g_s,rat_new,ylim=c(0,2))
plot(g_s,g_d)
plot(g_s,powerTransform(g_d,0))
plot(g_s,powerTransform(g_d,0.1))
plot(g_s,powerTransform(g_d,1))
plot(g_s,powerTransform(g_d,1.1))
plot(g_s,powerTransform(g_d,1.3))
plot(g_s,powerTransform(g_d,1.5))
plot(g_s,powerTransform(g_d,1.8))
plot(g_s,powerTransform(g_d,2.1))
plot(g_s,powerTransform(g_d,0.9))
plot(g_s,powerTransform(g_d,0.8))
plot(powerTransform(g_s,1),powerTransform(g_d,0.8))
plot(powerTransform(g_s,1.1),powerTransform(g_d,0.8))
plot(powerTransform(g_s,1.2),powerTransform(g_d,0.8))
plot(powerTransform(g_s,1.5),powerTransform(g_d,0.8))
plot(powerTransform(g_s,1.9),powerTransform(g_d,0.8))
plot(powerTransform(g_s,3),powerTransform(g_d,0.8))
plot(powerTransform(g_s,3),powerTransform(g_d,1.1))
plot(powerTransform(g_s,3),powerTransform(g_d,3))
plot(powerTransform(g_s,3),powerTransform(g_d,2))
plot(powerTransform(g_s,3),powerTransform(g_d,2.1))
plot(powerTransform(g_s,3),powerTransform(g_d,1.9))
plot(powerTransform(g_s,3),powerTransform(g_d,1.5))
plot(powerTransform(g_s,3),powerTransform(g_d,1.5))
plot(g_s,powerTransform(g_s,3))
plot(g_s,powerTransform(g_d,1.5))
plot(g_d,powerTransform(g_d,1.5))
plot(g_s,powerTransform(g_s,3))
g_s_new <- powerTransform(g_s,3)
g_d_new <- powerTransform(g_d,1.5)
g_s_new <- g_s_new - min(g_s_new,na.rm=T) + 0.1
g_d_new <- g_d_new - min(g_d_new,na.rm=T) + 0.1
plot(g_s_new,g_d_new)
plot(g_d_new/g_s_new,g_d_new)
plot(g_s_new,g_d_new/g_s_new)
g_d_new <- g_d_new - min(g_d_new,na.rm=T) + 0.01
plot(g_s_new,g_d_new/g_s_new)
g_d_new <- g_d_new - min(g_d_new,na.rm=T) + 0.1
plot(g_s_new,g_d_new/g_s_new)
cor(g_s_new,g_d_new/g_s_new)
cor(g_s_new,g_d_new/g_s_new,use='pair')
log2(0.2)
log10(0.2)
10^0.6
choose(6000,2)
choose(6000,3)
choose(6000,2)*6000
choose(6000,2)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('Cairo')
install.packages('animation')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('beeswarm')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('glmnet')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('h2o')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('xlsx')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('xlsx')
install.packages('xlsx2')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('xlsx')
library(xlsx)
install.packages('rJava')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
library(xlsx)
install.packages('rJava')
library(rJava)
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
setwd(this.dir)
setwd(input_data_directory)
input_file <- read.table(sequencing_filename,
head = T,
row.names = 1)
mapping_file <- read.table(mapping_filename,
head = T,
row.names = 1)
drug_control_list <- NULL
#Creates a list of what control to use for each drug, if it is provided
#Otherwise it defaults to 'NULL'
if (!is.null(drug_control_pair)) {
drug_control_list <- list()
drug_control_pair_file <- read.table(file = drug_control_pair)
for (i in 1:nrow(drug_control_pair_file)) {
drug <- as.vector(drug_control_pair_file[i, 1])
ctrl <- as.vector(drug_control_pair_file[i, 2])
drug_control_list[[drug]] <- ctrl
}
}
growth_list <- make_growth_list(
input_file,
mapping_file,
growth_metric = growth_metric,
drugs = c('CTRL','colchicine','benomyl','fluconazole'),
drug_control_list = drug_control_list
)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('ReorderCluster')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('dendextend')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
install.packages('growthcurver')
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
growth_list$fluconazole$A
fitness <- growth_list$fluconazole$A
names(fitness)
rownames(mapping_file)
rownames(mapping_file) == names(fitness)
dim(mapping_file)
mapping_file[names(fitness),]
eyo <_ mapping_file[names(fitness),]
eyo <- mapping_file[names(fitness),]
head(eyo)
pdr5_geno <- eyo$PDR5
snq2_geno <- eyo$SNQ2
yor1_geno <- eyo$YOR1
ybt1_geno <- eyo$YBT1
ycf1_geno <- eyo$YCF1
library(keras)
neg_constraint <- function(w) {
w * k_cast(k_less_equal(w, 0), k_floatx())
}
pos_constraint <- function(w) {
w * k_cast(k_greater_equal(w, 0), k_floatx())
}
#genes <- c('PDR5','SNQ2','YOR1')
#Automatic attempt
genes <- c('PDR5','SNQ2','YOR1','YBT1','YCF1')
act_type <- 'sigmoid'
regularization_rate <- 0.002
input_layers <- list()
for(gene in genes){
layer_name <- sprintf('%s_input',gene)
input_layers[[gene]] <- layer_input(shape = 1, dtype = 'float32', name = layer_name)
}
protein_layers <- list()
for(gene in genes){
layer_name <- sprintf('%s_protein',gene)
protein_layers[[gene]] <- layer_dense(units = 1, activation = act_type, name = layer_name,
kernel_constraint = neg_constraint,
kernel_regularizer = regularizer_l1(l = regularization_rate),
bias_regularizer = regularizer_l1(l = regularization_rate)
)
}
inhibition_layers <- list()
for(gene in genes){
layer_name <- sprintf('%s_inhibition',gene)
input_indeces <- which(names(input_layers) != gene)
input_vec <- c()
for(i in input_indeces){
input_vec <- c(input_vec,input_layers[[i]])
}
protein_layer <- protein_layers[[gene]]
gene_inh_layer <- layer_concatenate(input_vec,name=layer_name) %>% protein_layer
input_vec_this_gene <- input_layers[[gene]]
multiplication_vec <- c()
multiplication_list <- list(gene_inh_layer,input_vec_this_gene)
for(i in 1:length(multiplication_list)){
multiplication_vec <- c(multiplication_vec,multiplication_list[[i]])
}
layer_name <- sprintf('%s_inhibition_multiplied_by_gene_presence',gene)
gene_inh_layer <- layer_multiply(multiplication_vec,name=layer_name)
inhibition_layers[[gene]] <- gene_inh_layer
}
inhibition_layer_vec <- c()
for(i in 1:length(inhibition_layers)){
inhibition_layer_vec <- c(inhibition_layer_vec,inhibition_layers[[i]])
}
efflux_layer <- layer_concatenate(inhibition_layer_vec,name='total_inhibition') %>%
layer_dense(units = 1, activation = act_type,name='efflux_layer', kernel_constraint = pos_constraint)
efflux_model_auto <- keras_model(
inputs = input_layers,
outputs = efflux_layer
)
efflux_model_auto %>% compile(
loss = 'mse',
optimizer = optimizer_adam(lr = 0.5)
)
#pdr5_geno <- sample(c(0,1),3000,replace=T)
#snq2_geno <- sample(c(0,1),3000,replace=T)
#yor1_geno <- sample(c(0,1),3000,replace=T)
#ybt1_geno <- sample(c(0,1),3000,replace=T)
#ycf1_geno <- sample(c(0,1),3000,replace=T)
#fitness <- 1*pdr5_geno -
#
#  0.2*pdr5_geno*yor1_geno -
#  0.2*pdr5_geno*snq2_geno -
#  0.2*pdr5_geno*ybt1_geno -
#  0.2*pdr5_geno*ycf1_geno +
#  0.05*pdr5_geno*yor1_geno*snq2_geno +
#  0.05*pdr5_geno*yor1_geno*ybt1_geno +
#  0.05*pdr5_geno*yor1_geno*ycf1_geno +
#  0.05*pdr5_geno*snq2_geno*ybt1_geno +
#  0.05*pdr5_geno*snq2_geno*ycf1_geno +
#  0.05*pdr5_geno*ybt1_geno*ycf1_geno# +
#0.2*pdr5_geno*ycf1_geno*yor1_geno +
#0.2*pdr5_geno*ycf1_geno*yor1_geno +
#0.2*pdr5_geno*ycf1_geno*yor1_geno
#0.2*snq2_geno*pdr5_geno*yor1_geno +
#0.2*snq2_geno*pdr5_geno*yor1_geno
fitness <- fitness/max(fitness)
max(fitness)
hist(fitness)
hist(fitness,breaks=100)
history <- efflux_model_auto %>% fit(
list(pdr5_geno,
snq2_geno,
yor1_geno,
ybt1_geno,
ycf1_geno), fitness,
epochs = 300,
batch_size = 3000,
validation_split = 0.2
)
history <- efflux_model_auto %>% fit(
list(pdr5_geno,
snq2_geno,
yor1_geno,
ybt1_geno,
ycf1_geno), fitness,
epochs = 3000,
batch_size = 2000,
validation_split = 0.2
)
get_weights(efflux_model_auto())
get_weights(efflux_model_auto)
get_input_at(efflux_model_auto,1)
summary(efflux_model_auto)
get_input_at(efflux_model_auto,1)
get_weights(efflux_model_auto)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/master.R')
fitness <- growth_list$fluconazole$A
hist(fitness)
hist(fitness,breaks=100)
rep(genes,each=2)
choose(6000,5)
choose(6000,4)
?rec
?rect
sample(base_col_list)
base_col_list <- c(rgb(255, 253, 120, maxColorValue = 255),
rgb(127, 202, 255, maxColorValue = 255),
rgb(255, 159, 127, maxColorValue = 255),
rgb(151, 96, 193, maxColorValue = 255))
sample(base_col_list)
sample(base_col_list,1)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/generate_random_dna_barcode.R', echo=TRUE)
